pipeline {
    agent { 
        label 'jenkins-agent'
    }

    environment {
        registry = "264800517173.dkr.ecr.us-west-2.amazonaws.com/petclinic"
        scm_repo = 'petclinic-app'
    }

    stages { 

        stage('Clone Git repository') {
            steps{
                    git branch: 'master', url: "git@github.com:blacksun0504/${scm_repo}.git", credentialsId: 'github_key'
            }
        }

        stage('Run tests and build jar') {
            steps {
                sh "mvn clean package"
                script {
                    app_version=sh(returnStdout: true, script: 'mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.version -q -DforceStdout')
                }
            }
        }
        stage('Build Docker image') {
            steps {
                sh "docker build -t ${registry}:latest -t ${registry}:${app_version}.$BUILD_NUMBER -f ./Dockerfile ./target"
            }
        }

        stage('Push image') {
            steps {
                script {
                    docker.withRegistry( "https://${registry}", 'ecr:us-west-2:aws-admin-user') {
                        sh "docker push ${registry}:latest"
                        sh "docker push ${registry}:${app_version}.$BUILD_NUMBER"
                    }
                }
            }
        }

        stage('Tag Git commit') {
            steps{
                sshagent (credentials: ['github_key']) {
                    sh("git tag ${app_version}.$BUILD_NUMBER")
                    sh("git push origin ${app_version}.$BUILD_NUMBER")
                }
            }
        }
    }

    post {
        always {
            echo 'The pipeline run has been finished.'  
        }
        success {
            echo "Build ${BUILD_ID} is successful."
            mail to:"mariia.beschekova@eleks.com", subject:"SUCCESS: ${currentBuild.fullDisplayName}", body: "Build # $BUILD_NUMBER is successful."
            /*send commit status to SCM*/
            githubNotify account: 'blacksun0504', repo: "${scm_repo}", status: 'SUCCESS', description: 'The build has succeeded.', sha: "$GIT_COMMIT", credentialsId: 'github_key'
            cleanWs() /* clean up the workspace */
        }
        
        failure {
            echo "Build ${BUILD_ID} has failed. :("
            // cleanWs() /* clean up the workspace */
            mail to:"mariia.beschekova@eleks.com", subject:"FAILURE: ${currentBuild.fullDisplayName}", body: "Build # $BUILD_NUMBER has failed. Check console output at $BUILD_URL to view the results."
            githubNotify status: 'FAILURE', description: 'The build has failed.'
        }
    }
}
