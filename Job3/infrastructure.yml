AWSTemplateFormatVersion: '2010-09-09'
Description: >
  AWS CloudFormation template to create a new VPC
  with the ECS cluster and ASG.
Parameters:
  VpcCidr:
    Type: String
    Description: Specifies the CIDR Block of VPC
    Default: '10.10.0.0/16'
  SubnetCidr1:
    Type: String
    Description: Specifies the CIDR Block of Subnet 1
    Default: '10.10.0.0/24'
  SubnetCidr2:
    Type: String
    Description: Specifies the CIDR Block of Subnet 2
    Default: '10.10.1.0/24'
  SubnetCidr3:
    Type: String
    Description: Specifies the CIDR Block of Subnet 3
    Default: '10.10.2.0/24'
  SubnetCidr4:
    Type: String
    Description: Specifies the CIDR Block of Subnet 4
    Default: '10.10.3.0/24'
  Az1:
    Type: String
    Default: 'us-west-2a'
  Az2:
    Type: String
    Default: 'us-west-2b'
  EcsAmiId:
    Type: AWS::EC2::Image::Id
    Description: Specifies the AMI ID for the container instances.
    Default: 'ami-0fb71e703258ab7eb' # ECS-optimized Amazon Linux AMI 2
  EcsInstanceType:
    Type: String
    Description: >
      Specifies the EC2 instance type for the container instances.
    Default: t2.micro
  AsgMinSize:
    Type: String
    Default: '2'
  AsgMaxSize:
    Type: String
    Default: '3'
  AsgDesiredSize:
    Type: String
    Default: '2'
  EcsTaskCount:
    Type: Number
    Default: 4
  EcsServiceRole:
    Type: String
    Default: 'arn:aws:iam::264800517173:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS'
  EcsInstanceProfile:
    Type: String
    Default: 'arn:aws:iam::264800517173:instance-profile/ecsInstanceRole'
  CustomEcsInstancePolicy:
    Type: String
    Default: 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
  EcsTaskExecPolicy:
    Type: String
    Default: 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  EcsAutoscalingRole:
    Type: String
    Default: 'arn:aws:iam::264800517173:role/ecsAutoscaleRole'
  EcsDockerImage:
    Type: String
    Default: '264800517173.dkr.ecr.us-west-2.amazonaws.com/petclinic:2.1.53'
  CloudWatchLogsPolicy:
    Type: String
    Default: 'arn:aws:iam::264800517173:policy/CloudwatchLogsAgentPolicy'
  EcsContainerPort:
    Type: Number
    Default: 80
  KeyName:
    Type: String
    Default: DevopsLabKeys
  AppName:
    Type: String
    Default: petclinic
  RdsEngine:
    Type: String
    Default: mysql
  DBName:
    Default: petclinic
    Type: String
  DBUser:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Default: root
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.
    Default: petclinic
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.

Resources:
  # Create a secret to store root password for RDS (used for ECS task definition)
  DbPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: Root password for RDS
      GenerateSecretString: 
        PasswordLength: 10
        ExcludePunctuation: true
        IncludeSpace: false
        GenerateStringKey: password
        SecretStringTemplate: !Join ['', ['{"username": "', !Ref DBUser, '"}']]
      Name: RDS_CREDENTIALS

  SecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties: 
      SecretId: !Ref DbPasswordSecret
      TargetId: !Ref MasterDB
      TargetType: AWS::RDS::DBInstance

  # ResourcePolicy:
  #   Type: AWS::SecretsManager::ResourcePolicy
  #   Properties:
  #     SecretId: !Ref DbPasswordSecret
  #     ResourcePolicy:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: "Allow"
  #           Action: "secretsmanager:GetSecretValue"
  #           Resource: "*"
  #           Principal: 
  #             AWS: !Sub "arn:aws:iam::${AWS::AccountId}:user/*"
  #         - Effect: "Allow"
  #           Action: "secretsmanager:GetSecretValue"
  #           Resource: "*"
  #           Principal: 
  #             AWS: !Sub "arn:aws:iam::${AWS::AccountId}:role/*"

# -------------------------------------
#             NETWORKING 
# -------------------------------------
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: vpc01

  # Create two public subnets in different AZ
  PubSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr1
      AvailabilityZone: !Ref Az1
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: vpc01-pub01

  PubSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr2
      AvailabilityZone: !Ref Az2
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: 'vpc01-pub02'

  # Create two private subnets in different AZ
  PrivSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr3
      AvailabilityZone: !Ref Az1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: 'vpc01-priv01'

  PrivSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr4
      AvailabilityZone: !Ref Az2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: 'vpc01-priv02'

  # Create internet gateway and attach it to VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'vpc01-igw'
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  # Create a routing table for public subnets with internet gateway
  RouteViaIgw:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PublicRouteViaIgw:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteViaIgw
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Associate routing table 1 with public subnets
  PubSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz1
      RouteTableId: !Ref RouteViaIgw

  PubSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnetAz2
      RouteTableId: !Ref RouteViaIgw

  # Create a NAT gateway with EIP to provide internet access for private subnets
  NatEip:
    Type: AWS::EC2::EIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PubSubnetAz1
      AllocationId: !GetAtt NatEip.AllocationId

  # Create a routing table for public subnets with NAT gateway attachment
  RouteViaNat:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  PrivateRouteViaNat:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteViaNat
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway

  # Associate routing table 2 with private subnets
  PrivSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivSubnetAz1
      RouteTableId: !Ref RouteViaNat

  PrivSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivSubnetAz2
      RouteTableId: !Ref RouteViaNat
  
  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: description
      SubnetIds: 
        - !Ref PrivSubnetAz1
        - !Ref PrivSubnetAz2
      Tags: 
        - 
          Key: Name
          Value: 'vpc01-subnetgroup'

# -------------------------------------
#          SECURITY GROUPS 
# -------------------------------------
  # Create a security group for allowing traffic from everywhere on ports 80, 8080, and 22
  SecurityGroup01:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'Allow traffic from everywhere on ports 80 and 22.'
      GroupName: 'vpc01: public access'
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: 0
          ToPort: 0
          CidrIp: '0.0.0.0/0'
      Tags: 
        - Key: Name
          Value: 'vpc01-sg01'

  # Create a security group for allowing traffic to ECS instances from everywhere on all ports from the ALB
  SecurityGroup02:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'Allow traffic from ALB to the ECS instances on all ports.'
      GroupName: 'vpc01: ecs access'
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !GetAtt SecurityGroup01.GroupId
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: 0
          ToPort: 0
          CidrIp: '0.0.0.0/0'
      Tags: 
        - Key: Name
          Value: 'vpc01-sg02'

  # Create a security group for allowing traffic from ECS instances to RDS on port 3306
  SecurityGroup03:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'Allow traffic from the ECS instances to RDS on port 3306.'
      GroupName: 'vpc01: db access'
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt SecurityGroup02.GroupId
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: 0
          ToPort: 0
          CidrIp: '0.0.0.0/0'
      Tags: 
        - Key: Name
          Value: 'vpc01-sg03'


# -------------------------------------
#                 IAM 
# -------------------------------------
  CustomEcsTaskExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref EcsTaskExecPolicy
      Policies:
        - PolicyName: SecretsReadPolicy
          PolicyDocument: {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Action": [
                        "secretsmanager:GetSecretValue"
                    ],
                    "Effect": "Allow",
                    "Resource": "*"
                }
              ]
            }
    
  CustomEcsInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Ref CustomEcsInstancePolicy
      Policies:
        - PolicyName: SecretsReadPolicy
          PolicyDocument: {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream"
                    ],
                    "Effect": "Allow",
                    "Resource": "*"
                }
              ]
            }
  
  CustomEcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: CustomEcsInstanceProfile
      Path: "/"
      Roles: 
        - !Ref CustomEcsInstanceRole

# -------------------------------------
#             AUTOSCALING 
# -------------------------------------
  # Create a launch configuration for ECS ASG 
  EcsInstanceLc:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref EcsAmiId
      InstanceType: !Ref EcsInstanceType
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref CustomEcsInstanceProfile
      KeyName: !Ref KeyName
      SecurityGroups: [ !Ref SecurityGroup02 ]
      PlacementTenancy: default
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
          yum update -y
          yum install -y aws-cfn-bootstrap aws-cli awslogs 
          EC2_INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
          REGION=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone | sed s'/.$//')
          cat > /etc/awslogs/awslogs.conf << EOF
          [general]
          state_file = /var/lib/awslogs/agent-state
          [/var/log/ecs/ecs-agent.log]
          datetime_format = %b %d %H:%M:%S
          file = /var/log/ecs/ecs-agent.log*
          log_group_name = EcsAgentLogs
          log_stream_name = ${EcsCluster}/${AppName}/$EC2_INSTANCE_ID
          EOF
          # Set the region to send CloudWatch Logs data to (the region where the container instance is located)
          sed -i -e "s/region = us-east-1/region = $REGION/g" /etc/awslogs/awscli.conf
          sudo systemctl start awslogsd
          aws logs put-retention-policy --log-group-name EcsAgentLogs --retention-in-days 1

  # Create an ASG for the ECS cluster
  EcsInstanceAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: AttachGateway
    Properties:
      AutoScalingGroupName: !Sub ${AppName}-asg
      LaunchConfigurationName: !Ref EcsInstanceLc
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      VPCZoneIdentifier:
        - !Ref PubSubnetAz1
        - !Ref PubSubnetAz2
      TargetGroupARNs:
        - !Ref TargetGroup01
      MinSize: !Ref AsgMinSize
      DesiredCapacity: !Ref AsgDesiredSize
      MaxSize: !Ref AsgMaxSize
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-asg
          PropagateAtLaunch: true

  # Create a cluster scale-out policy based on memory reservation
  EcsClusterScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref EcsInstanceAsg
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
      Cooldown: '60'

  # Create a scale-in policy based on memory reservation
  EcsClusterScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref EcsInstanceAsg
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      ScalingAdjustment: -1
      Cooldown: '60'

  # Create a scalable target for the ECS service
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 9
      MinCapacity: 4
      ResourceId: !Join ['', [service/, !Ref EcsCluster, /, !GetAtt [EcsService, Name]]]
      RoleARN: !Ref EcsAutoscalingRole
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
 
  # Create a service scale-out policy based on ALB requests count
  EcsServiceScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: EcsServiceScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - 
            ScalingAdjustment: 1
            MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 100
          - 
            ScalingAdjustment: 2
            MetricIntervalLowerBound: 100
            MetricIntervalUpperBound: 200
          - 
            ScalingAdjustment: 3
            MetricIntervalLowerBound: 200

  # Create a scale-in policy based on ALB requests count
  EcsServiceScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: EcsServiceScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 30
        MetricAggregationType: Average
        StepAdjustments:
          - 
            ScalingAdjustment: -1
            MetricIntervalUpperBound: 0

# -------------------------------------
#           ECS CLUSTER 
# -------------------------------------
  # Create ECS cluster
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: 'cluster01'
      Tags: 
        - Key: Name
          Value: !Sub ${AppName}-cluster

  # Create a task definition for the Petclinic service
  EscTaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Family: !Sub ${AppName}-taskdef01
      RequiresCompatibilities:
        - 'EC2'
      ExecutionRoleArn: !GetAtt  CustomEcsTaskExecRole.Arn
      NetworkMode: bridge
      ContainerDefinitions: 
        - Name: !Ref AppName
          Image: !Ref EcsDockerImage
          Cpu: 300
          MemoryReservation: 300
          PortMappings: 
            - ContainerPort: !Ref EcsContainerPort
              HostPort: 0
          LogConfiguration:
              LogDriver: awslogs 
              Options: 
                awslogs-group: !Ref DockerLogGroup
                awslogs-region: !Ref 'AWS::Region'
                awslogs-stream-prefix: !Ref 'AWS::StackName'
          Environment:
            -
              Name: spring.profiles.active
              Value: mysql
            -
              Name: spring.datasource.url
              Value: !Join ['', ['jdbc:mysql://', !GetAtt [MasterDB, Endpoint.Address], ':', !GetAtt [MasterDB, Endpoint.Port], /, !Ref 'DBName']]
            -
              Name: spring.datasource.username
              Value: !Join ['', ['{{resolve:secretsmanager:', !Ref DbPasswordSecret, ':SecretString:username}}' ]]
            -
              Name: spring.datasource.initialize
              Value: 'true'
            - 
              Name: spring.datasource.password
              Value: !Join ['', ['{{resolve:secretsmanager:', !Ref DbPasswordSecret, ':SecretString:password}}' ]]
      Tags: 
        - Key: Name
          Value: !Sub ${AppName}-taskdef

  # Create an ECS service based on the task defition created earlier
  EcsService:
    Type: AWS::ECS::Service
    DependsOn: HttpListener
    Properties: 
      ServiceName: !Sub srv01-${AppName}
      Cluster: !Ref EcsCluster
      TaskDefinition: !Ref EscTaskDef
      DesiredCount: !Ref EcsTaskCount
      LaunchType: EC2
      HealthCheckGracePeriodSeconds: 300
      Role: !Ref EcsServiceRole
      LoadBalancers:
        - 
          ContainerPort: 80
          ContainerName: !Ref AppName
          TargetGroupArn: !Ref TargetGroup01
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 50

# -------------------------------------
#           LOAD BALANCING 
# -------------------------------------
  # Create an ALB to use with ECS
  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref SecurityGroup01
      Subnets: 
        - !Ref PubSubnetAz1
        - !Ref PubSubnetAz2
      Tags: 
        - Key: Name
          Value: !Sub ${AppName}-alb

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref Alb
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup01
          Type: forward
      Protocol: HTTP
      Port: 80

  # Create a target group for the ALB
  TargetGroup01:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: Alb
    Properties:
      VpcId: !Ref Vpc
      TargetType: instance
      Protocol: HTTP
      Port: 80
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckPort: traffic-port
      HealthCheckProtocol : HTTP
      HealthCheckTimeoutSeconds: 10
      UnhealthyThresholdCount: 10
      Tags: 
        - Key: Name
          Value: !Sub ${AppName}-tg

# -------------------------------------
#                 RDS 
# -------------------------------------
  MasterDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      DBSubnetGroupName: !Ref DbSubnetGroup
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: db.t2.micro
      Engine: !Ref RdsEngine
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DbPasswordSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DbPasswordSecret, ':SecretString:password}}' ]]
      MultiAZ: false
      Tags:
      - Key: Name
        Value: !Sub ${AppName}-master
      VPCSecurityGroups: [ !GetAtt SecurityGroup03.GroupId ]
      BackupRetentionPeriod: 0
    DeletionPolicy: Snapshot

# -------------------------------------
#             CLOUDWATCH
# -------------------------------------
  # Configure a Cloudwatch alarm that fires when ALB receives more than 100 req/min
  EcsServiceScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Fires when ALB receives more than 100 req/min.'
      AlarmName: !Sub ${AppName}-RequestCountHigh
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: RequestCount
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Dimensions:
        - Name: LoadBalancer
          Value:
            !GetAtt Alb.LoadBalancerFullName
      Period: 60
      EvaluationPeriods: 3
      Threshold: 100
      TreatMissingData: missing
      AlarmActions:
        - !Ref AlarmTopic
        - !Ref EcsServiceScaleOutPolicy

  # Configure a Cloudwatch alarm that fires when ALB receives less than 10 req/min
  EcsServiceScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Fires when ALB receives less than 10 req/min.'
      AlarmName: !Sub ${AppName}-RequestCountLow
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: RequestCount
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Dimensions:
        - Name: LoadBalancer
          Value:
            !GetAtt Alb.LoadBalancerFullName
      Period: 60
      EvaluationPeriods: 3
      Threshold: 10
      TreatMissingData: missing
      AlarmActions:
        - !Ref AlarmTopic
        - !Ref EcsServiceScaleInPolicy

  # Configure Cloudwatch to send alerts via email when average Memory reservation of ASG instance exceeds the target value
  EcsClusterScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Fires when average memory reservation of ASG instances exceeds the target value.'
      AlarmName: !Sub ${AppName}-MemoryReservationHigh
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Statistic: Average
      Dimensions:
        - Name: ClusterName
          Value: !Ref EcsCluster
      Period: 60
      EvaluationPeriods: 1
      Threshold: 90
      Unit: Percent
      TreatMissingData: missing
      AlarmActions:
        - !Ref AlarmTopic
        - !Ref EcsClusterScaleOutPolicy

  EcsClusterScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: 'Fires when average memory reservation of ASG instances is below the target value.'
      AlarmName: !Sub ${AppName}-MemoryReservationLow
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Statistic: Average
      Dimensions:
        - Name: ClusterName
          Value: !Ref EcsCluster
      Period: 60
      Unit: Percent
      EvaluationPeriods: 1
      Threshold: 50
      TreatMissingData: missing
      AlarmActions:
        - !Ref AlarmTopic
        - !Ref EcsClusterScaleInPolicy

  AlarmTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        TopicName: !Sub ${AppName}-alarmTopic
        Subscription:
          - Protocol: email
            Endpoint: liquid92@gmail.com

  # Create Cloudwatch log groups
  # EcsLogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     RetentionInDays: 1

  DockerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1


Outputs:
  MasterJDBCConnectionString:
    Description: JDBC connection string for the master database
    Value: !Join ['', ['jdbc:mysql://', !GetAtt [MasterDB, Endpoint.Address], ':',
        !GetAtt [MasterDB, Endpoint.Port], /, !Ref 'DBName']]

  LoadBalancerUrl:
    Description: URL of the ALB in from of the ECS cluster
    Value: !Join ['', ['http://', !GetAtt Alb.DNSName ]]

Metadata:
  cfn-lint:
    config:
      ignore_checks:
      - W2