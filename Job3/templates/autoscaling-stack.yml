AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Creates ECS service and cluster autoscaling policies.
Parameters:
  Vpc:
    Type: AWS::EC2::VPC::Id
  EcsService:
    Type: String
  EcsServiceName:
    Type: String
  EcsCluster:
    Type: String
  TargetGroup01:
    Type: String
  EcsInstanceAsg:
    Type: String
  EcsServiceRole:
    Type: String
    Default: 'arn:aws:iam::264800517173:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS'
  EcsInstanceProfile:
    Type: String
    Default: 'arn:aws:iam::264800517173:instance-profile/ecsInstanceRole'
  CustomEcsInstancePolicy:
    Type: String
    Default: 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'
  EcsTaskExecPolicy:
    Type: String
    Default: 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  EcsAutoscalingRole:
    Type: String
    Default: 'arn:aws:iam::264800517173:role/ecsAutoscaleRole'
  CloudWatchLogsPolicy:
    Type: String
    Default: 'arn:aws:iam::264800517173:policy/CloudwatchLogsAgentPolicy'
  AppName:
    Type: String

Resources:
  # Create a cluster scale-out policy based on memory reservation
  EcsClusterScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref EcsInstanceAsg
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
      Cooldown: '60'

  # Create a scale-in policy based on memory reservation
  EcsClusterScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref EcsInstanceAsg
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      ScalingAdjustment: -1
      Cooldown: '60'

  # Create a scalable target for the ECS service
  ServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 9
      MinCapacity: 4
      ResourceId: !Sub service/${EcsCluster}/${EcsServiceName}
      RoleARN: !Ref EcsAutoscalingRole
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
 
  # Create a service scale-out policy based on ALB requests count
  EcsServiceScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: EcsServiceScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - 
            ScalingAdjustment: 1
            MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 100
          - 
            ScalingAdjustment: 2
            MetricIntervalLowerBound: 100
            MetricIntervalUpperBound: 200
          - 
            ScalingAdjustment: 3
            MetricIntervalLowerBound: 200

  # Create a scale-in policy based on ALB requests count
  EcsServiceScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: EcsServiceScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 30
        MetricAggregationType: Average
        StepAdjustments:
          - 
            ScalingAdjustment: -1
            MetricIntervalUpperBound: 0

Outputs:

  EcsServiceScaleOutPolicy:
    Value: !Ref EcsServiceScaleOutPolicy

  EcsClusterScaleInPolicy:
    Value: !Ref EcsClusterScaleInPolicy
  
  EcsServiceScaleInPolicy:
    Value: !Ref EcsServiceScaleInPolicy  

  EcsClusterScaleOutPolicy:
    Value: !Ref EcsClusterScaleOutPolicy

Metadata:
  cfn-lint:
    config:
      ignore_checks:
      - W2